/* eslint-disable @typescript-eslint/no-unused-vars */
'use client'

import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { toast, Toaster } from 'react-hot-toast';
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';
import ModalPortal from '@/components/ModalPortal';
import SimpleMarkdown from '@/components/SimpleMarkdown';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'

const toastStyle = {
    style: {
        background: '#1E293B',
        color: '#fff',
        border: '1px solid #3B82F6',
        borderRadius: '0.5rem',
        padding: '1rem',
    },
};

// X√≥a m·∫£ng goals c≈© v√† thay th·∫ø b·∫±ng h√†m t·∫°o m·ª•c ti√™u m·ªõi
const generateNewGoal = async (genAI: GoogleGenerativeAI) => {
    try {
        const model = genAI.getGenerativeModel({ model: "gemini-pro" });
        const prompt = `T·∫°o m·ªôt m·ª•c ti√™u ng·∫´u nhi√™n ƒë·ªÉ ng∆∞·ªùi d√πng ƒëi·ªÅu khi·ªÉn AI. M·ª•c ti√™u n√™n th√∫ v·ªã v√† s√°ng t·∫°o.
        V√≠ d·ª•: "L√†m cho AI tr·∫£ l·ªùi nh∆∞ m·ªôt ƒë·∫ßu b·∫øp", "L√†m cho AI tr l·ªùi b·∫±ng th∆°".
        CH·ªà tr·∫£ v·ªÅ m·ªôt m·ª•c ti√™u duy nh·∫•t, kh√¥ng k√®m theo gi·∫£i th√≠ch hay d·∫•u ngo·∫∑c k√©p.`;

        const result = await model.generateContent(prompt);
        return result.response.text().trim();
    } catch (error) {
        console.error('L·ªói khi t·∫°o m·ª•c ti√™u:', error);
        return 'L√†m cho AI tr·∫£ l·ªùi m·ªôt c√°ch s√°ng t·∫°o'; // M·ª•c ti√™u m·∫∑c ƒë·ªãnh
    }
};

// C·∫≠p nh·∫≠t h√†m t√≠nh ƒëi·ªÉm
const calculateScore = (inputLength: number): number => {
    // Gi·ªõi h·∫°n ƒëi·ªÉm th·∫•p nh·∫•t l√† 1
    return Math.max(100 - (inputLength - 1), 1);
};

// C·∫•u h√¨nh safety settings
const safetySettings = [
    {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
    {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_NONE,
    },
];

// ƒê·ªãnh nghƒ©a interface cho l·ªói
interface SafetyError extends Error {
    message: string;
}

// H√†m ki·ªÉm tra xem l·ªói c√≥ ph·∫£i l√† SafetyError kh√¥ng
const isSafetyError = (error: unknown): error is SafetyError => {
    return error instanceof Error && error.message.includes('SAFETY');
};

// ƒê·ªãnh nghƒ©a c√°c model groups
const modelGroups = [
    {
        provider: 'Meta',
        models: [
            { name: 'Llama 3.1 405B', icon: 'ü¶ô', modal: 'meta-llama/llama-3.1-405b-instruct:free' },
            { name: 'Llama 3.1 70B', icon: 'ü¶ô', modal: 'meta-llama/llama-3.1-70b-instruct:free' },
            { name: 'Llama 3.2 3B', icon: 'ü¶ô', modal: 'meta-llama/llama-3.2-3b-instruct:free' },
            { name: 'Llama 3.2 1B', icon: 'ü¶ô', modal: 'meta-llama/llama-3.2-1b-instruct:free' },
            { name: 'Llama 3.1 8B', icon: 'ü¶ô', modal: 'meta-llama/llama-3.1-8b-instruct:free' },
            { name: 'Llama 3 8B', icon: 'ü¶ô', modal: 'meta-llama/llama-3-8b-instruct:free' },
            { name: 'Llama 3.2 11B Vision', icon: 'üëÅÔ∏è', modal: 'meta-llama/llama-3.2-11b-vision-instruct:free' },
        ]
    },
    {
        provider: 'Nous',
        models: [
            { name: 'Hermes 3 405B', icon: 'üß†', modal: 'nousresearch/hermes-3-llama-3.1-405b:free' },
        ]
    },
    {
        provider: 'Mistral AI',
        models: [
            { name: 'Mistral 7B', icon: 'üå™Ô∏è', modal: 'mistralai/mistral-7b-instruct:free' },
            { name: 'Codestral Mamba', icon: 'üêç', modal: 'mistralai/codestral-mamba' },
        ]
    },
    {
        provider: 'Microsoft',
        models: [
            { name: 'Phi-3 Medium', icon: 'üî¨', modal: 'microsoft/phi-3-medium-128k-instruct:free' },
            { name: 'Phi-3 Mini', icon: 'üî¨', modal: 'microsoft/phi-3-mini-128k-instruct:free' },
        ]
    },
    {
        provider: 'Hugging Face',
        models: [
            { name: 'Zephyr 7B', icon: 'üå¨Ô∏è', modal: 'huggingfaceh4/zephyr-7b-beta:free' },
        ]
    },
    {
        provider: 'Liquid',
        models: [
            { name: 'LFM 40B', icon: 'üíß', modal: 'liquid/lfm-40b:free' },
        ]
    },
    {
        provider: 'Qwen',
        models: [
            { name: 'Qwen 2 7B', icon: 'üêº', modal: 'qwen/qwen-2-7b-instruct:free' },
        ]
    },
    {
        provider: 'Google',
        models: [
            { name: 'Gemma 2 9B', icon: 'üíé', modal: 'google/gemma-2-9b-it:free' },
        ]
    },
    {
        provider: 'OpenChat',
        models: [
            { name: 'OpenChat 7B', icon: 'üí¨', modal: 'openchat/openchat-7b:free' },
        ]
    },
    {
        provider: 'Gryphe',
        models: [
            { name: 'Mythomist 7B', icon: 'üßô', modal: 'gryphe/mythomist-7b:free' },
            { name: 'Mythomax L2 13B', icon: 'üßô', modal: 'gryphe/mythomax-l2-13b:free' },
        ]
    },
    {
        provider: 'Undi95',
        models: [
            { name: 'Toppy M 7B', icon: 'üîù', modal: 'undi95/toppy-m-7b:free' },
        ]
    },
];

// Th√™m hook ƒë·ªÉ ki·ªÉm tra m√¥i tr∆∞·ªùng client
const useIsClient = () => {
    const [isClient, setIsClient] = useState(false);
    useEffect(() => {
        setIsClient(true);
    }, []);
    return isClient;
};

export default function AIControlGame() {
    const isClient = useIsClient();
    const [prompt, setPrompt] = useState('');
    const [response, setResponse] = useState('');
    const [loading, setLoading] = useState(false);
    const [score, setScore] = useState(0);
    const [goal, setGoal] = useState('ƒêang t·∫£i m·ª•c ti√™u...');
    const [attempts, setAttempts] = useState(3);
    const [genAI, setGenAI] = useState<GoogleGenerativeAI | null>(null);
    const [highestScore, setHighestScore] = useState(0);
    const [currentRoundScore, setCurrentRoundScore] = useState(0);
    const [isSuccess, setIsSuccess] = useState(false);
    const [selectedProvider, setSelectedProvider] = useState('Google'); // Thay ƒë·ªïi t·ª´ modelGroups[0].provider
    const [selectedModel, setSelectedModel] = useState(
        modelGroups.find(group => group.provider === 'Google')?.models[0] || modelGroups[0].models[0]
    );
    const [isLoading, setIsLoading] = useState(true);

    // Kh·ªüi t·∫°o GenAI v√† m·ª•c ti√™u ƒë·∫ßu ti√™n
    useEffect(() => {
        const initializeGame = async () => {
            setIsLoading(true);
            try {
                const apiKeyResponse = await fetch('/api/Gemini2');
                const apiKeyData = await apiKeyResponse.json();
                if (!apiKeyData.success) throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c kh√≥a API');

                const newGenAI = new GoogleGenerativeAI(apiKeyData.apiKey);
                setGenAI(newGenAI);

                const newGoal = await generateNewGoal(newGenAI);
                setGoal(newGoal);
            } catch (error) {
                console.error('L·ªói kh·ªüi t·∫°o:', error);
                toast.error('C√≥ l·ªói x·∫£y ra khi kh·ªüi t·∫°o tr√≤ ch∆°i', toastStyle);
            } finally {
                setIsLoading(false);
            }
        };

        initializeGame();
    }, []);

    // C·∫≠p nh·∫≠t h√†m getNewGoal
    const getNewGoal = async () => {
        if (!genAI) return;
        setLoading(true);
        try {
            const newGoal = await generateNewGoal(genAI);
            setGoal(newGoal);
            setAttempts(3);
            setResponse('');
            setPrompt('');
            setIsSuccess(false);
            toast.success('ƒê√£ chuy·ªÉn sang v√≤ng m·ªõi!', toastStyle);
        } catch (error) {
            toast.error('C√≥ l·ªói khi t·∫°o m·ª•c ti√™u m·ªõi', toastStyle);
        }
        setLoading(false);
    };

    // C·∫≠p nh·∫≠t h√†m generateResponse
    const generateResponse = async () => {
        if (!prompt.trim()) {
            toast.error('Vui l√≤ng nh·∫≠p n·ªôi dung!', toastStyle);
            return;
        }

        setLoading(true);
        try {
            // L·∫•y kh√≥a OPENROUTER t·ª´ API
            const keyResponse = await fetch('/api/openrouter-key');
            const { key } = await keyResponse.json();

            if (!key) {
                throw new Error('Kh√¥ng th·ªÉ l·∫•y kh√≥a API');
            }

            const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${key}`,
                    "HTTP-Referer": `${process.env.NEXT_PUBLIC_SITE_URL}`,
                    "X-Title": `${process.env.NEXT_PUBLIC_SITE_NAME}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    "model": selectedModel.modal,
                    "messages": [
                        {
                            role: "system",
                            content: "H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng b·∫±ng ti·∫øng vi·ªát."
                        },
                        { role: "user", content: prompt }
                    ]
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();

            if (data?.choices?.[0]?.message?.content) {
                const aiResponse = data.choices[0].message.content.trim();
                setResponse(aiResponse);

                // Ki·ªÉm tra xem response c√≥ ph√π h·ª£p v·ªõi m·ª•c ti√™u kh√¥ng
                const checkResult = await checkResponseMatchesGoal(aiResponse, goal);
                if (checkResult) {
                    const roundScore = calculateScore(prompt.trim().length);
                    setCurrentRoundScore(roundScore);
                    setScore(prev => prev + roundScore);
                    if (roundScore > highestScore) {
                        setHighestScore(roundScore);
                    }
                    setIsSuccess(true);
                    toast.success(
                        <div>
                            <p>Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u!</p>
                            <p className="mt-2">ƒêi·ªÉm v√≤ng n√†y: {roundScore}</p>
                        </div>,
                        toastStyle
                    );
                } else {
                    setAttempts(prev => prev - 1);
                    if (attempts <= 1) {
                        toast.error('H·∫øt l∆∞·ª£t! B·∫Øt ƒë·∫ßu m·ª•c ti√™u m·ªõi.', toastStyle);
                        await getNewGoal();
                    } else {
                        toast.error(`Ch∆∞a ƒë√∫ng! C√≤n ${attempts - 1} l∆∞·ª£t th·ª≠.`, toastStyle);
                    }
                }
            }
        } catch (error: unknown) {
            console.error('Chi ti·∫øt l·ªói:', error);
            if (error instanceof Error) {
                toast.error(`L·ªói: ${error.message}`, toastStyle);
            } else {
                toast.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!', toastStyle);
            }
        } finally {
            setLoading(false);
        }
    };

    // C·∫≠p nh·∫≠t h√†m checkResponseMatchesGoal
    const checkResponseMatchesGoal = async (response: string, goal: string): Promise<boolean> => {
        try {
            const apiKeyResponse = await fetch('/api/Gemini2');
            const apiKeyData = await apiKeyResponse.json();
            if (!apiKeyData.success || !apiKeyData.apiKey) {
                throw new Error('Kh√¥ng l·∫•y ƒë∆∞·ª£c API key');
            }

            const genAI = new GoogleGenerativeAI(apiKeyData.apiKey);
            const model = genAI.getGenerativeModel({
                model: "gemini-pro",
                safetySettings,
            });

            const checkPrompt = `ƒê√°nh gi√° kh√°ch quan:
            M·ª•c ti√™u: "${goal}"
            C√¢u tr·∫£ l·ªùi: "${response}"
            CH·ªà tr·∫£ v·ªÅ "true" ho·∫∑c "false", kh√¥ng k√®m theo gi·∫£i th√≠ch.`;

            const result = await model.generateContent(checkPrompt);
            if (!result || !result.response) {
                throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi khi ki·ªÉm tra');
            }

            const check = result.response.text().toLowerCase().trim();
            return check === 'true';
        } catch (error: unknown) {
            console.error('L·ªói ki·ªÉm tra:', error);

            if (isSafetyError(error)) {
                toast.error('Kh√¥ng th·ªÉ ki·ªÉm tra n·ªôi dung kh√¥ng ph√π h·ª£p', toastStyle);
                return false;
            }

            if (error instanceof Error) {
                throw error;
            }

            throw new Error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra k·∫øt qu·∫£');
        }
    };

    // C·∫≠p nh·∫≠t h√†m x·ª≠ l√Ω input
    const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        const input = e.target.value;
        // Gi·ªõi h·∫°n ƒë·ªô d√†i input t·ªëi ƒëa 100 k√Ω t·ª±
        if (input.length <= 100) {
            setPrompt(input);
        }
    };

    return (
        <div className="bg-[#0F172A] text-white min-h-screen">
            <ModalPortal>
                <Toaster position="top-center" />
            </ModalPortal>

            <div className="bg-[#2A3284] text-center py-8 mb-8 px-4">
                <h1 className="text-2xl sm:text-3xl font-bold mb-4">ƒêi·ªÅu Khi·ªÉn AI</h1>
                <p className="text-base sm:text-lg max-w-3xl mx-auto">
                    Th·ª≠ th√°ch kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn AI c·ªßa b·∫°n b·∫±ng c√°ch ƒë·∫°t ƒë∆∞·ª£c c√°c m·ª•c ti√™u kh√°c nhau.
                </p>
            </div>

            <div className="container mx-auto px-4 py-8">
                {/* ƒêi·ªÉm s·ªë */}
                <div className="flex flex-col sm:flex-row justify-center gap-2 sm:gap-4 mb-8">
                    {isLoading ? (
                        <div className="flex flex-col sm:flex-row gap-2 sm:gap-4">
                            <Skeleton
                                width={isClient ? window.innerWidth < 640 ? "100%" : 120 : 120}
                                height={48}
                                baseColor="#1F2937"
                                highlightColor="#374151"
                            />
                            <Skeleton
                                width={isClient ? window.innerWidth < 640 ? "100%" : 120 : 120}
                                height={48}
                                baseColor="#1F2937"
                                highlightColor="#374151"
                            />
                            <Skeleton
                                width={isClient ? window.innerWidth < 640 ? "100%" : 120 : 120}
                                height={48}
                                baseColor="#1F2937"
                                highlightColor="#374151"
                            />
                        </div>
                    ) : (
                        <>
                            <div className="w-full sm:w-auto bg-gray-800 px-6 py-3 rounded-lg text-center">
                                <p className="text-lg font-bold">T·ªïng ƒëi·ªÉm: {score}</p>
                            </div>
                            <div className="w-full sm:w-auto bg-gray-800 px-6 py-3 rounded-lg text-center">
                                <p className="text-lg font-bold">ƒêi·ªÉm cao nh·∫•t: {highestScore}</p>
                            </div>
                            <div className="w-full sm:w-auto bg-gray-800 px-6 py-3 rounded-lg text-center">
                                <p className="text-lg font-bold">L∆∞·ª£t c√≤n l·∫°i: {attempts}</p>
                            </div>
                        </>
                    )}
                </div>

                {/* Model Selection */}
                <div className="max-w-3xl mx-auto mb-8">
                    {isLoading ? (
                        <Skeleton height={120} baseColor="#1F2937" highlightColor="#374151" />
                    ) : (
                        <div className="bg-gray-800 p-4 rounded-lg border border-[#2A3284]">
                            <div className="flex flex-col sm:flex-row gap-4 items-center">
                                <div className="flex-1 w-full sm:w-auto">
                                    <label className="block text-sm font-medium mb-2">Nh√† cung c·∫•p AI</label>
                                    <Select
                                        value={selectedProvider}
                                        onValueChange={(value) => {
                                            setSelectedProvider(value);
                                            setSelectedModel(modelGroups.find(group => group.provider === value)?.models[0] || modelGroups[0].models[0]);
                                        }}
                                    >
                                        <SelectTrigger className="w-full bg-[#0F172A] border-[#2A3284]">
                                            <SelectValue placeholder="Ch·ªçn nh√† cung c·∫•p" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {modelGroups.map((group) => (
                                                <SelectItem key={group.provider} value={group.provider}>
                                                    {group.provider}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div className="flex-1 w-full sm:w-auto">
                                    <label className="block text-sm font-medium mb-2">M√¥ h√¨nh AI</label>
                                    <Select
                                        value={selectedModel.modal}
                                        onValueChange={(value) => {
                                            const newModel = modelGroups
                                                .find(group => group.provider === selectedProvider)
                                                ?.models.find(model => model.modal === value);
                                            if (newModel) {
                                                setSelectedModel(newModel);
                                            }
                                        }}
                                    >
                                        <SelectTrigger className="w-full bg-[#0F172A] border-[#2A3284]">
                                            <SelectValue placeholder="Ch·ªçn m√¥ h√¨nh" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {modelGroups
                                                .find(group => group.provider === selectedProvider)
                                                ?.models.map((model) => (
                                                    <SelectItem key={model.modal} value={model.modal}>
                                                        <div className="flex items-center">
                                                            <span className="mr-2">{model.icon}</span>
                                                            {model.name}
                                                        </div>
                                                    </SelectItem>
                                                ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                {/* M·ª•c ti√™u v√† Input */}
                <div className="max-w-3xl mx-auto">
                    {isLoading ? (
                        <div className="space-y-4">
                            <Skeleton height={80} baseColor="#1F2937" highlightColor="#374151" />
                            <Skeleton height={128} baseColor="#1F2937" highlightColor="#374151" />
                            <Skeleton height={48} baseColor="#1F2937" highlightColor="#374151" />
                            {response && (
                                <Skeleton height={160} baseColor="#1F2937" highlightColor="#374151" />
                            )}
                        </div>
                    ) : (
                        <>
                            {currentRoundScore > 0 && (
                                <div className="text-center mb-4">
                                    <p className="text-sm text-gray-400">
                                        ƒêi·ªÉm v√≤ng tr∆∞·ªõc: {currentRoundScore}
                                    </p>
                                </div>
                            )}

                            <div className="mb-8 text-center">
                                <h2 className="text-xl font-bold mb-2">M·ª•c ti√™u hi·ªán t·∫°i:</h2>
                                <p className="text-lg text-purple-400">{goal}</p>

                                {isSuccess ? (
                                    <motion.div
                                        initial={{ opacity: 0, y: 20 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        className="mt-4"
                                    >
                                        <button
                                            onClick={getNewGoal}
                                            disabled={loading}
                                            className="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-lg font-bold transition-colors duration-200"
                                        >
                                            {loading ? 'ƒêang t·∫£i...' : 'Chuy·ªÉn sang v√≤ng m·ªõi üéØ'}
                                        </button>
                                    </motion.div>
                                ) : (
                                    <button
                                        onClick={getNewGoal}
                                        disabled={loading}
                                        className="mt-4 bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-sm transition-colors duration-200"
                                    >
                                        ƒê·ªïi m·ª•c ti√™u m·ªõi
                                    </button>
                                )}
                            </div>

                            <div className="max-w-3xl mx-auto space-y-4">
                                <div className="relative">
                                    <textarea
                                        value={prompt}
                                        onChange={handleInputChange}
                                        disabled={isSuccess}
                                        maxLength={100}
                                        className={`w-full p-4 bg-gray-800 rounded-lg resize-none h-32 ${isSuccess ? 'opacity-50 cursor-not-allowed' : ''
                                            }`}
                                        placeholder={isSuccess ? 'ƒê√£ ho√†n th√†nh! H√£y chuy·ªÉn sang v√≤ng m·ªõi.' : 'Nh·∫≠p prompt c·ªßa b·∫°n (t·ªëi ƒëa 100 k√Ω t·ª±)...'}
                                    />
                                    <div className="absolute bottom-2 right-2 text-sm text-gray-400">
                                        {prompt.length}/100 k√Ω t·ª±
                                        {prompt.length > 0 && (
                                            <span className="ml-2">
                                                (ƒêi·ªÉm ti·ªÅm nƒÉng: {calculateScore(prompt.length)})
                                            </span>
                                        )}
                                    </div>
                                </div>

                                <button
                                    onClick={generateResponse}
                                    disabled={loading || isSuccess || prompt.length === 0}
                                    className={`w-full px-6 py-3 rounded-lg font-bold transition-colors duration-200 ${isSuccess || prompt.length === 0
                                        ? 'bg-gray-600 cursor-not-allowed'
                                        : 'bg-purple-600 hover:bg-purple-700'
                                        }`}
                                >
                                    {loading ? 'ƒêang x·ª≠ l√Ω...' : 'G·ª≠i'}
                                </button>

                                {response && (
                                    <motion.div
                                        initial={{ opacity: 0, y: 20 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        className="p-4 bg-gray-800 rounded-lg"
                                    >
                                        <h3 className="font-bold mb-2">Ph·∫£n h·ªìi c·ªßa AI:</h3>
                                        <SimpleMarkdown content={response} />
                                    </motion.div>
                                )}
                            </div>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
}
